#ifndef ARRAY_H
#define ARRAY_H

#include <stdlib.h>
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#ifdef HAVE_PCRE_H
# include <pcre.h>
#endif
#include "buffer.h"

#define DATA_IS_STRING(x) (x->type == TYPE_STRING)

















//Lighttpd中数据结构种类
typedef enum { TYPE_UNSET, TYPE_STRING, TYPE_COUNT, TYPE_ARRAY, TYPE_INTEGER, TYPE_FASTCGI, TYPE_CONFIG } data_type_t;
















//data_unset数据结构的宏定义
#define DATA_UNSET \
	data_type_t type; \
	buffer *key; \
	int is_index_key; /* 1 if key is a array index (autogenerated keys) */ \
	struct data_unset *(*copy)(const struct data_unset *src); \
	void (* free)(struct data_unset *p); \
	void (* reset)(struct data_unset *p); \
	int (*insert_dup)(struct data_unset *dst, struct data_unset *src); \
	void (*print)(const struct data_unset *p, int depth)














//定义data_unset数据结构，因为其数据结构是多种数据结构的基础，所以它的数据成员由宏定义完成
typedef struct data_unset {
	DATA_UNSET;
	/*原本的内容：
	data_type_t type; 
	//在array结构体中data数组排列的序号
	buffer *key; 
	//是否有索引key
	int is_index_key; 
	//用回调函数，结构体里保存函数指针,当调用data_xxx_init函数时，会为下面的函数指针赋值
	struct data_unset *(*copy)(const struct data_unset *src); 
	void (* free)(struct data_unset *p); 
	void (* reset)(struct data_unset *p); 
	int (*insert_dup)(struct data_unset *dst, struct data_unset *src); 
	void (*print)(const struct data_unset *p, int depth)
	*/
} data_unset;
















//定义array结构体，其存储的数据结构体是data_unset
typedef struct {
//data是数组指针（二级数组），看作是一维数组，其数组元素是存放基础数据结构（data_unset）的指针
	data_unset  **data;
//sorted将按照data中各个数据元素的排序顺序保存对应的下标
	size_t *sorted;
//已经使用了的data数据存储空间
	size_t used;
//一共有的data数据存储空间
	size_t size;
//用于为data数据建立唯一索引，初始值为0，之后递增
	size_t unique_ndx;
//大于used的最小整数2^n，即used < 2 ^n,next_power_of_2=2^n
	size_t next_power_of_2;
//本数据是否为其他数据的引用，是为1，不是为0
	int is_weakref; 
} array;
















//定义data_count数据结构
typedef struct {
	DATA_UNSET;

	int count;
} data_count;















//定义data_count数据结构的初始化函数
data_count *data_count_init(void);












//定义data_string数据结构
typedef struct {
	DATA_UNSET;

	buffer *value;
} data_string;












//定义data_string数据结构的初始化函数
data_string *data_string_init(void);











data_string *data_response_init(void);













//定义data_array数据结构
typedef struct {
	DATA_UNSET;
	array *value;
} data_array;















//定义data_array数据结构的初始化函数
data_array *data_array_init(void);


















/**
 * possible compare ops in the configfile parser
 */
typedef enum {
	CONFIG_COND_UNSET,
	CONFIG_COND_EQ,      /** == */
	CONFIG_COND_MATCH,   /** =~ */
	CONFIG_COND_NE,      /** != */
	CONFIG_COND_NOMATCH  /** !~ */
} config_cond_t;















/**
 * possible fields to match against
 */
typedef enum {
	COMP_UNSET,
	COMP_SERVER_SOCKET,
	COMP_HTTP_URL,
	COMP_HTTP_HOST,
	COMP_HTTP_REFERER,
	COMP_HTTP_USER_AGENT,
	COMP_HTTP_COOKIE,
	COMP_HTTP_REMOTE_IP,
	COMP_HTTP_QUERY_STRING,
	COMP_HTTP_SCHEME,
	COMP_HTTP_REQUEST_METHOD,

	COMP_LAST_ELEMENT
} comp_key_t;

/* $HTTP["host"] ==    "incremental.home.kneschke.de" { ... }
 * for print:   comp_key      op    string
 * for compare: comp          cond  string/regex
 */















//定义data_config数据结构
typedef struct _data_config data_config;
struct _data_config {
	DATA_UNSET;

	array *value;

	buffer *comp_key;
	comp_key_t comp;

	config_cond_t cond;
	buffer *op;
//或多或少像个ID
	int context_ndx; /* more or less like an id */ 
	array *childs;
	/* nested */
	data_config *parent;
	/* for chaining only */
	data_config *prev;
	data_config *next;

	buffer *string;
#ifdef HAVE_PCRE_H
	pcre   *regex;
	pcre_extra *regex_study;
#endif
};














//定义data_config数据结构的初始化函数
data_config *data_config_init(void);












//定义data_integer数据结构
typedef struct {
	DATA_UNSET;

	int value;
} data_integer;











//定义data_integer数据结构的初始化函数
data_integer *data_integer_init(void);









//定义data_fastcgi数据结构
typedef struct {
	DATA_UNSET;

	buffer *host;

	unsigned short port;

	time_t disable_ts;
	int is_disabled;
	size_t balance;

	int usage; /* fair-balancing needs the no. of connections active on this host */
	int last_used_ndx; /* round robin */
} data_fastcgi;












//定义data_fastcgi数据结构的初始化函数
data_fastcgi *data_fastcgi_init(void);













//下面是array结构体的操作函数声明
array *array_init(void);
array *array_init_array(array *a);
void array_free(array *a);
void array_reset(array *a);
int array_insert_unique(array *a, data_unset *str);
data_unset *array_pop(array *a);
int array_print(array *a, int depth);
data_unset *array_get_unused_element(array *a, data_type_t t);
data_unset *array_get_element(array *a, const char *key);
data_unset *array_replace(array *a, data_unset *du);
int array_strcasecmp(const char *a, size_t a_len, const char *b, size_t b_len);
void array_print_indent(int depth);
size_t array_get_max_key_length(array *a);

#endif
